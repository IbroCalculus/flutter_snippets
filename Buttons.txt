CHECK ALSO; TextButton.txt


- Text button
- Outlined button
- Elevated button
- Filled button
- Filled tonal button
- Check also below: MaterialButton (Seem nice, use it)


NB: To disable button, use:
              onPressed: null,

=========== Elevated button =============
-- Handling click event using anonymous function -------

        body: Center(
          child: ElevatedButton(
            onPressed: () {
              print('You tapped on this button');
            },
            //child: Text('Click This Now'),
            child: Image.asset('assets/images/google.png'),	// Adding image to asset
          ),
          style: ElevatedButton.styleFrom(
            padding: EdgeInsets.all(20.0),
            fixedSize: Size(300, 80),
            fixedSize: Size(double.maxFinite, double.minPositive),  // fill_parent (WIDTH), wrap_content (HEIGHT)
            textStyle: TextStyle(
              fontSize: 20.0,
              fontWeight: FontWeight.bold,
            ),
            backgroundColor: Colors.red,
            foregroundColor: Colors.white,
            elevation: 15.0,
            shadowColor: Colors.red,
            side: BorderSide(color: Colors.black54, width: 5,),
            
            shape: CircleBorder(),
            shape: StadiumBorder(),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8.0)
            ),

          ),

-------------- OR -------------------
        body: Center(
          child: ElevatedButton(
            onPressed: () => print('You tapped on this button'),
            child: Text('Click This Now'),
          ),


---- Handling click events, using name function ---
  const MyApp({Key? key}) : super(key: key);

  void btn1Response(){
    print("This is the response to button 1");
    Fluttertoast.showToast(
        msg: "You clicked on button 2",
        toastLength: Toast.LENGTH_SHORT,
    );
  }

                ElevatedButton(
                  onPressed: btn1Response,
                  child: Text('Answer 1'),
                ),


============= ENABLE DYNAMIC CHANGE OF DATA ON BUTTON CLICKED ================

NB: We work with stateful widget instead of stateless, hover and select convert to stateful widget
NB: You can check Variables.txt if face any problems working with variable data here.

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {

  String buttonText = 'Switch ON';
  int state = 0;

        body: Center(
          child: ElevatedButton(
            onPressed: () {
              if (state == 0) {
                setState(() {
                  buttonText = 'Switch ON';
                  state = 1;
                });
              } else if (state == 1) {
                setState(() {
                  buttonText = 'Turn OFF';
                  state = 0;
                });
              }
            },
            child: Text(buttonText),
          ),


================== Button Styling =====================

                  child: Text(buttonText),
                  style: ElevatedButton.styleFrom(
                    foregroundColor: Colors.white,
                    backgroundColor: Colors.red,
                  ),


================= MATERIAL BUTTON =====================

            MaterialButton(
              child: Text("Submit"),
              color: Colors.red,
              textColor: Colors.white,
              onPressed: () {
                if(_formKey.currentState!.validate()){
                  Fluttertoast.showToast(msg: "All forms validated!");
                }else{
                  Fluttertoast.showToast(msg: "Failed to validate forms!");
                }

                },
            ),


========================== Switching icons on button clicked (NB: Stateful widget) ===============

class _StatefulWidget2State extends State<StatefulWidget2> {

  bool isTapped = true;

            IconButton(
              icon: isTapped? Icon(Icons.account_box,) : Icon(Icons.circle,),
              onPressed: () {
                setState(() {
                  isTapped =! isTapped;
                });
              },
              iconSize: 100,
            )

   ----- For better readability ----
IconButton(
  icon: isTapped
      ? Icon(Icons.account_box, size: 100, color: Colors.green)
      : Icon(Icons.account_box_outlined, size: 100, color: Colors.blue),
  onPressed: () {
    setState(() {
      isTapped = !isTapped;
    });
  },
)
