CHECK ALSO: Navigation2.txt for navigation using routine in a different class

ALTERNATIVELY: Use dependency;

  get: ^4.6.5

            onTap: () {
              Get.to(() => SplashInstagram());
            },


NB: SystemNavigator.pop();		// This exits/closes the application. Check below to see its usage with onBack pressed
NB:
        appBar: AppBar(
          automaticallyImplyLeading: false,	// This do away with the <- in the next page's app bar that allows backward navigation when clicked.


---------------------- 1. Navigation to another screen  -----------------
The screen Class name is TextStyling

              onTap: (){

                Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => TextStyling())
                );

                Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (context) => TextStyling())
                );
			 //Same as 'finish()' in android. Discard from backstack 

              },

		// OR
		
                  Navigator.of(context).push(MaterialPageRoute(builder: (context) =>const SecondPage()));


---------------------- To go back in stack  -----------------
            Navigator.pop(context);


---------------------- To go back while returning an information -----------

	--- The first page ---

                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const SecondPage(),
                    ),
                  ).then(
                    (result) {
                      if (result is String) {
                        print('RETURNED RESULT: $result');		// OUTPUT: 'RETURNED RESULT: return message to first page
                        showAlert(context, "Sample title", result);	// where showAlert is a custom defined function for showing alert message
                      }
                    },
                  );

	--- The second page ---

                  String theMsg = "return message to first page";
                  Navigator.pop(context, theMsg);	// Navigator.of(context).pop("Pop message");




  ---------------- using Named Navigation --------------------
 
                Navigator.pushNamed(context, "/home");

                Navigator.pushReplacementNamed(context, '/home');   //Same as 'finish()' in android. Discard from backstack
               // Navigator.of(context).pushReplacementNamed('/home');.


 ----------------- In main.dart  --------------------      
      initialRoute: '/',	// home: LoginPage(),    Remove home, and add initialRoute instead.
      routes: {
        '/': (context) => LoginPage(),
        '/home': (context) => HomePage(),
      },
      onUnknownRoute: (settings) {
        MaterialPageRoute(builder: (context) =>
        Scaffold(
          appBar: AppBar(title: const Text('Unknown Route')),
          // body: Center(child: Text('Unknown route: ${settings.path}')),
          body: const Center(child: Text('Unknown route: 404'),),
        ));
        return null;
      },

--- E.g: ---

                Navigator.pushNamed(context, "/home");

    return MaterialApp(
      title: "Flutter Lesson2",
      initialRoute: "/",

      routes: {
        "/":(context) => Dashboard(),
        "/home": (context) => HomePage(),
        "/friend_request":(context) => FriendRequestPage(),
        "/login":(context) => LoginPage(),
      },
      onUnknownRoute: (settings) {
        MaterialPageRoute(builder: (context) =>
        Scaffold(
          appBar: AppBar(title: const Text('Unknown Route')),
          // body: Center(child: Text('Unknown route: ${settings.path}')),
          body: const Center(child: Text('Unknown route: 404'),),
        ));
        return null;
      },
    );


----------------- Saving routes in a different file  ----------------------------

Create folder within lib, ie _routing, create a dart file, ie routes.dart, with a class  within it, ie AppRoutes
Cut and paste the values of routes into the file as shown:

class AppRoutes {
  static Map<String, Widget Function(BuildContext)> routes = {
    "/": (context) => Dashboard(),
    "/login": (context) => LoginPage(),
    "/friend_request": (context) => FriendRequestPage(),
    "/home_page": (context) => HomePage(),
  };
}


--- Within main.dart ---
      title: "Flutter Lesson2",

      initialRoute: "/",
      routes: AppRoutes.routes,



----------------- Saving routes in a different file (Using RouterGenerator) (CHECK: Navigation2.txt) ----------------------------



================================= To Pass value from one activity to another  =================================
 --- On First Activity:

  String productName = "";
  String password = "Abcd1234";

                TextFormField(
                  onChanged: (value) {
                    productName = value;
                    setState(() {});
                  },
                  decoration: InputDecoration(
                    labelText: "Product Name",
                    // icon: Icon(Icons.verified_user_outlined),
                    prefixIcon: Icon(Icons.verified_user_outlined),
                    // This icon will be within
                    border: OutlineInputBorder(),
                  ),
                ),
                Text("Product Name is: $productName"),
                SizedBox(
                  height: 20.0,
                ),
                myButton(context),

  OutlinedButton myButton(BuildContext context) {
    return OutlinedButton(
      onPressed: () {
        Navigator.push(
            context, MaterialPageRoute(builder: (context) => Details(productName: productName, password: password)));		// This will take in the values to be sent to Details() Page
      },
      style: OutlinedButton.styleFrom(
        minimumSize: Size(200, 50),
      ),
      child: Text(
        "Submit Form".toUpperCase(),
        style: TextStyle(
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }


 --- On Details Activity:

  Details({super.key, required this.productName, required this.password});		// Note here

  String productName;
  String password;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(

        title: Text("Details"),
        centerTitle: true,
      ),
      body: Center(
        child: GestureDetector(
          child: Text("Product Name: $productName,\nPassword: $password"),		// The values are used here
          onTap: () {
            Navigator.pop(context);
            Fluttertoast.showToast(msg: "Pop method called!");
          },
        ),
      ),
    );
  }
--------------------------------------------------------


================= Handle onBackButton pressed =======================

      body: WillPopScope(
        onWillPop: () async {
          print("Back button pressed");
          Fluttertoast.showToast(msg: "Back button pressed");
          return true;						    Return false to prevent further back navigation (not necessary in this case), hence return true is the opposite.
        },
        child: Container(

 ---- Using same as above to exit the application ----

      body: WillPopScope(
        onWillPop: () async {
          print("Back button pressed");
          Fluttertoast.showToast(msg: "Back button pressed");
          SystemNavigator.pop();
          return false;							//NB: return false. Return false to prevent further back navigation (not necessary in this case)
        },
        child: Container(


----- maybe pop (If there's a previous page) -------

        body: WillPopScope(
          onWillPop: () async {
            print("Back button pressed");
            Navigator.pop(context);
            return false; // returning false prevents the pop operation
          },


          child: Center(
                ElevatedButton(onPressed: (){
                  Navigator.of(context).maybePop();		// HERE 
                }, child: const Text("Using Maybe Pop"),),

