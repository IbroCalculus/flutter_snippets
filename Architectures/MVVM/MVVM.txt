================== 1. What is MVVM? ==================
MVVM is a three-layer architecture that divides an application into:

Model (M) ‚Äì Handles data and business logic.
View (V) ‚Äì Represents the UI.
ViewModel (VM) ‚Äì Acts as a bridge between the Model and View, containing UI-related logic.
Unlike MVC (Model-View-Controller), where the View directly interacts with the Model, in MVVM:

The ViewModel fetches and processes data from the Model.
The View listens to the ViewModel and updates the UI when needed.

============ MVVM Structure:==========
Model <--> ViewModel <--> View


============ 2. Breaking Down MVVM Components ============
1Ô∏è‚É£ Model (M)
Represents the data, database models, or API responses.
Handles business logic and data retrieval.
Example: A class that fetches user data from an API.
2Ô∏è‚É£ ViewModel (VM)
Acts as an intermediary between the View and Model.
Contains logic for UI state, transformations, and updates.
Holds state management and exposes data to the View.
Uses a state management approach like Provider, Riverpod, or Bloc.
3Ô∏è‚É£ View (V)
Displays UI components to users.
Listens to the ViewModel and rebuilds when data changes.
Does not directly handle business logic.


=============== Understanding Repository in MVVM Architecture (Flutter) ===============
In MVVM, a Repository is responsible for handling data operations. It acts as an intermediary between the ViewModel and the data sources (such as APIs, local databases, or shared preferences).
View <--> ViewModel <--> Repository <--> Data Source (API/Database)

The purpose of the repository pattern is to:
 - Abstract data access logic.
 - Provide a single source of truth for the ViewModel.
 - Decouple business logic from data sources.
 - Improve testability by allowing easy mocking of data sources

----- How Repository Works in MVVM -----

View <--> ViewModel <--> Repository <--> Data Source (API/Database)
 - The ViewModel requests data from the Repository.
 - The Repository fetches data from an API, database, or cache.
 - The Repository then returns the data to the ViewModel.
 - The ViewModel processes the data and updates the View.

------ üîç Why Use a Repository in MVVM? ------
‚úÖ Separation of Concerns ‚Äì ViewModel doesn‚Äôt need to worry about where data comes from.
‚úÖ Scalability ‚Äì Easily switch between API, database, or local storage without modifying the ViewModel.
‚úÖ Code Reusability ‚Äì The same repository can be used by multiple ViewModels.
‚úÖ Testability ‚Äì Easier unit testing since ViewModel can be tested independently from data sources.