
NB: There two ways of working with API data. Either:
	- Without a Model Class: Directly parsing and using the JSON data.â€‹
	- With a Model Class: Defining a structured model to represent the data.


=================== WITHOUT MODEL CLASS (Using FutureBuilder as a future reference code) =================

--------- api_without_model_page.dart ---------------

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class ApiWithoutModelPage extends StatefulWidget {
  const ApiWithoutModelPage({super.key});

  @override
  State<ApiWithoutModelPage> createState() => _ApiWithoutModelPageState();
}

class _ApiWithoutModelPageState extends State<ApiWithoutModelPage> {
  Future<List<dynamic>>? posts;
  final String apiUrl = 'https://jsonplaceholder.typicode.com/posts';

  Future<List<dynamic>> fetchPosts() async {
    final response = await http.get(Uri.parse(apiUrl));
    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else {
      throw Exception('Failed to load posts');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Fetch Posts Example'),
      ),
      body: Column(
        children: [
          Expanded(
            child: FutureBuilder<List<dynamic>>(
              future: posts,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                } else if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                } else if (snapshot.hasData && snapshot.data!.isNotEmpty) {
                  return ListView.builder(
                    itemCount: snapshot.data!.length,
                    itemBuilder: (context, index) {
                      var post = snapshot.data![index];
                      return ListTile(
                        title: Text(post['title']),
                        subtitle: Text(post['body']),
                      );
                    },
                  );
                } else {
                  return Center(child: Text('No posts available.'));
                }
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: ElevatedButton(
              onPressed: () {
                setState(() {
                  posts = fetchPosts();
                });
              },
              child: Text("Fetch Posts"),
            ),
          ),
          SizedBox(height: 50,)
        ],
      ),
    );
  }
}


=================== WITHOUT MODEL CLASS (Same as above, but without FutureBuilder, for easy readability) =================



=================== WITH MODEL CLASS =================

Use the website; https://javiercbk.github.io/json_to_dart/ to easily generate the model class of the api structure

-------------- posts_model.dart -------------

class PostsModel {
  int? userId;
  int? id;
  String? title;
  String? body;

  PostsModel({this.userId, this.id, this.title, this.body});

  PostsModel.fromJson(Map<String, dynamic> json) {
    userId = json['userId'];
    id = json['id'];
    title = json['title'];
    body = json['body'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['userId'] = this.userId;
    data['id'] = this.id;
    data['title'] = this.title;
    data['body'] = this.body;
    return data;
  }
}


--------- api_with_model_page.dart ---------------

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import '../models/posts_model.dart';

class ApiWithModelPage extends StatefulWidget {
  const ApiWithModelPage({super.key});

  @override
  State<ApiWithModelPage> createState() => _ApiWithModelPageState();
}

class _ApiWithModelPageState extends State<ApiWithModelPage> {

  Future<List<PostsModel>>? posts;
  final String apiUrl = 'https://jsonplaceholder.typicode.com/posts';

  Future<List<PostsModel>> fetchPosts() async {
    final response = await http.get(Uri.parse(apiUrl));
    if (response.statusCode == 200) {
      List<dynamic> data = jsonDecode(response.body);
      return data.map((json) => PostsModel.fromJson(json)).toList();
    } else {
      throw Exception('Failed to load posts');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Fetch Posts with Model Example'),
      ),
      body: Column(
        children: [
          Expanded(
            child: FutureBuilder<List<PostsModel>>(
              future: posts,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                } else if (snapshot.hasError) {
                  return Center(child: Text('Error: ${snapshot.error}'));
                } else if (snapshot.hasData && snapshot.data!.isNotEmpty) {
                  return ListView.builder(
                    itemCount: snapshot.data!.length,
                    itemBuilder: (context, index) {
                      var post = snapshot.data![index];
                      return ListTile(
                        title: Text(post.title ?? 'No Title'),
                        subtitle: Text(post.body ?? 'No Content'),
                      );
                    },
                  );
                } else {
                  return Center(child: Text('No posts available.'));
                }
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: ElevatedButton(
              onPressed: () {
                setState(() {
                  posts = fetchPosts();
                });
              },
              child: Text("Fetch Posts"),
            ),
          ),
          SizedBox(height: 50),
        ],
      ),
    );
  }
}





