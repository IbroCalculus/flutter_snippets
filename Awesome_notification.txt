
  awesome_notifications: ^0.10.1


-------------- android manifest -------------

    <uses-permission android:name="android.permission.VIBRATE"/>
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.WAKE_LOCK"/>
    <uses-permission android:name="android.permission.ACCESS_NOTIFICATION_POLICY"/>
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
    <uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM"/>
    <uses-permission android:name="android.permission.USE_FULL_SCREEN_INTENT"/>
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>

 --- ALSO ENSURE:
            android:exported="true" 

------------- build.gradle ------------------
buildscript {
    ...
    
    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.1'
    }
}

android {
    compileSdkVersion 34

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 34
        ...
    }
    ...
}


------------- create an util file, ie; awesome_notification_service.dart ----------------

import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:flutter/material.dart';

class AwesomeNotificationService {

  static void initAwesomeNotifications(){

    AwesomeNotifications().initialize(
      //   'resource://drawable/res_app_icon',  set the icon to null if you want to use the default app icon
        null,
        [
          NotificationChannel(
            channelGroupKey: 'basic_channel_group',
            channelKey: 'basic_channel',
            channelName: 'Basic notifications',
            channelDescription: 'Notification channel for basic tests',
            defaultColor: Color(0xFF9D50DD),
            ledColor: Colors.white,
          ),
          NotificationChannel(
            channelGroupKey: 'scheduled_channel_group',
            channelKey: 'scheduled_channel',
            channelName: 'Scheduled notifications',
            channelDescription: 'Notification channel for scheduled notifications',
            defaultColor: Color(0xFF9D50DD),
            ledColor: Colors.white,
          ),
          NotificationChannel(
            channelGroupKey: 'button_channel_group',
            channelKey: 'button_channel',
            channelName: 'Button notifications',
            channelDescription: 'Notification channel for notifications with buttons',
            defaultColor: Color(0xFF9D50DD),
            ledColor: Colors.white,
          ),
        ],
        channelGroups: [
          NotificationChannelGroup(
            channelGroupKey: 'basic_channel_group',
            channelGroupName: 'Basic group',
          ),
          NotificationChannelGroup(
            channelGroupKey: 'scheduled_channel_group',
            channelGroupName: 'Scheduled group',
          ),
          NotificationChannelGroup(
            channelGroupKey: 'button_channel_group',
            channelGroupName: 'Button group',
          ),
        ],
        debug: true       // true in debug mode, false in release mode
    );

    // -- To handle the button notification action --
    AwesomeNotifications().setListeners(
        onActionReceivedMethod: NotificationController.onActionReceivedMethod
    );

  }
}


class NotificationController {
  @pragma('vm:entry-point')
  static Future<void> onActionReceivedMethod(ReceivedAction action) async {
    if (action.buttonKeyPressed == 'ACCEPT') {
      print("Action accepted");
    } else if (action.buttonKeyPressed == 'REJECT') {
      print("Action rejected");
    }
  }
}



-------------- main.dart -------------------

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  AwesomeNotificationService.initAwesomeNotifications();  
  runApp(const MyApp());
}


------------- USAGE (ie home_view.dart) 4 buttons --------------

import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:flutter/material.dart';

class HomeView extends StatefulWidget {
  const HomeView({super.key});

  @override
  State<HomeView> createState() => _HomeViewState();
}

class _HomeViewState extends State<HomeView> {

  Future<void> _requestNotificationPermission() async {
    bool isAllowed = await AwesomeNotifications().isNotificationAllowed();
    if (!isAllowed) {
      await AwesomeNotifications().requestPermissionToSendNotifications();
    }
  }
  

  Future<void> _showInstantNotification() async {
    bool isAllowed = await AwesomeNotifications().isNotificationAllowed();
    if (!isAllowed) {
      await _requestNotificationPermission();
      isAllowed = await AwesomeNotifications().isNotificationAllowed();
      if (!isAllowed) return;
    }
    AwesomeNotifications().createNotification(
      content: NotificationContent(
        id: 10,
        channelKey: 'basic_channel',
        actionType: ActionType.Default,
        title: 'Hello World!',
        body: 'This is my first notification!',
      ),
    );
  }
  

  Future<void> _scheduleNotification() async {
    bool isAllowed = await AwesomeNotifications().isNotificationAllowed();
    if (!isAllowed) {
      await _requestNotificationPermission();
      isAllowed = await AwesomeNotifications().isNotificationAllowed();
      if (!isAllowed) return;
    }
    AwesomeNotifications().createNotification(
      content: NotificationContent(
        id: 20,
        channelKey: 'scheduled_channel', // Ensure this matches the initialized channel
        title: 'Scheduled Notification',
        body: 'This notification was scheduled to appear now.',
      ),
      schedule: NotificationCalendar.fromDate(
        date: DateTime.now().add(Duration(seconds: 5)), // Schedules for 5 seconds later
        repeats: false,
      ),
    );
  }


  Future<void> _showNotificationWithButtons() async {
    bool isAllowed = await AwesomeNotifications().isNotificationAllowed();
    if (!isAllowed) {
      await _requestNotificationPermission();
      isAllowed = await AwesomeNotifications().isNotificationAllowed();
      if (!isAllowed) return;
    }
    AwesomeNotifications().createNotification(
      content: NotificationContent(
        id: 30,
        channelKey: 'button_channel',
        title: 'Notification with Buttons',
        body: 'This notification has action buttons.',
      ),
      actionButtons: [
        NotificationActionButton(
          key: 'ACCEPT',
          label: 'Accept',
        ),
        NotificationActionButton(
          key: 'REJECT',
          label: 'Reject',
        ),
      ],
    );
  }


  Future<void> _cancelScheduledNotifications() async {
    await AwesomeNotifications().cancelAllSchedules();
  }


  @override
  void initState() {
    super.initState();
    _requestNotificationPermission();
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: const Text('Awesome Notifications'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [

            ElevatedButton(
              onPressed: _showInstantNotification,
              child: Text("Show Instant Notification"),
            ),
            
            ElevatedButton(
              onPressed: _scheduleNotification,
              child: Text("Schedule Notification"),
            ),
            
            ElevatedButton(
              onPressed: _showNotificationWithButtons,
              child: Text("Notification with Buttons"),
            ),
            
            ElevatedButton(
              onPressed: _cancelScheduledNotifications,
              child: Text("Cancel Scheduled Notifications"),
            ),
          ],
        ),
      ),
    );
  }
}


