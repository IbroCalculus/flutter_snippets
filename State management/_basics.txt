State management is how Flutter handles and maintains changes in an app, such as UI updates, user interactions, and data modifications.

======================= Types of State in Flutter: =======================

------ 1. Ephemeral State (UI State) ------

 - Short-lived state like animations, text field input, or button toggles.
 - Managed using setState().
 - Suitable for simple apps.

------ 2. App-wide State (Global State) ------

 - Persistent data shared across multiple widgets, like authentication state, themes, or user sessions.
 - Requires a proper state management solution.

Popular State Management Approaches:

State Management			Description												Use Case

setState()				Built-in Flutter method for local UI updates.							Small apps, simple UI updates.
Provider				Official Flutter-recommended state management; efficient dependency injection.			Medium to large apps, scalable.
Riverpod				An improved version of Provider with better performance and modularity.				Large, modular apps, recommended for maintainability.
Bloc (Business Logic Component)		Uses streams for predictable state management and separation of concerns.			Enterprise-level apps, scalable apps.
GetX					Lightweight, simple, and fast. Provides dependency injection and state management.		Small to medium apps, simple projects.
Redux					Centralized state management, inspired by React Redux.						Complex apps with high predictability needs.
MobX					Reactive state management based on observables.							Apps requiring fine-grained reactivity.


Which One Should You Choose?
✅ For small apps → setState(), GetX
✅ For medium apps → Provider, Riverpod
✅ For large-scale apps → Bloc, Clean Architecture (with Riverpod or Provider)