
  firebase_core: ^2.24.2
  cloud_firestore: ^4.13.6



========== CREATE A FIRESTORE SERVICE CLASS ===============

import 'package:cloud_firestore/cloud_firestore.dart';

class FirestoreDbService {

 final firestore = FirebaseFirestore.instance;
 final collection = "users";

  void create({required String name, required String email, required String phone}) {
    try {
      firestore.collection(collection).add({
        "username": name,
        "email": email,
        "phone": phone,
      });
    } catch (e) {
      print(e);
    }
  }


  void read() {
    try {
      firestore.collection(collection).get().then((querySnapshot) {
        querySnapshot.docs.asMap().forEach((index,doc) {
          print(" $index: ${doc.data()} ---------> Document ID: ${doc.id}");
        });
      });
    } catch (e) {
      print(e);
    }
  }


  void update({required String id, required String name, required String email, required String phone}) {
    try {
      firestore.collection(collection).doc(id).update({
        "username": name,
        "email": email,
        "phone": phone,
      });
    } catch (e) {
      print(e);
    }
  }


  void delete({required String id}) {
    try {
      firestore.collection(collection).doc(id).delete();
    } catch (e) {
      print(e);
    }
  }
}




=========== USAGE: WITH TEXTFIELDS AND BUTTONS ==================

import 'package:flutter/material.dart';

import '../utils/firestore_db_service.dart';

class Firestoredb2Page extends StatefulWidget {
  Firestoredb2Page({super.key});

  @override
  State<Firestoredb2Page> createState() => _Firestoredb2PageState();
}

class _Firestoredb2PageState extends State<Firestoredb2Page> {

  final TextEditingController nameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();

  final FirestoreDbService firestoreDbService = FirestoreDbService();

  @override
  void dispose() {
    nameController.dispose();
    emailController.dispose();
    phoneController.dispose();
    super.dispose();
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Firestore"),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          spacing: 10.0,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TextField(controller: nameController, decoration: const InputDecoration(hintText: "Name")),

            TextField(controller: emailController, decoration: const InputDecoration(hintText: "Email")),

            TextField(controller: phoneController, decoration: const InputDecoration(hintText: "Phone")),

            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildButton("Create", () {
                  firestoreDbService.create(name: nameController.text, email: emailController.text, phone: phoneController.text);
                }),
                _buildButton("Read", () {
                  firestoreDbService.read();
                }),
              ],
            ),

            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildButton("Update", () {}),
                _buildButton("Delete", () {}),
              ],
            ),
          ],
        ),
      ),
    );
  }



  // Reusable Button widget used for the Create, Read, Update, and Delete buttons.

  Widget _buildButton(String text, VoidCallback onPressed) {
    return ElevatedButton(
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
      child: Text(text, style: const TextStyle(fontSize: 16)),
    );
  }
}
