
  permission_handler: ^11.1.0

<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE"/>


---------- In main.dart --------------


***************************************************************************************
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';

Future<void> requestPermissions(List<Permission> permissions) async {
  for (var permission in permissions) {
    // Request permission and get status
    var status = await permission.request();

    if (status.isGranted) {
      print('${permission.toString().split('.')[1]} permission granted');
    } else if (status.isDenied) {
      print('${permission.toString().split('.')[1]} permission denied');
    } else if (status.isPermanentlyDenied) {
      print('${permission.toString().split('.')[1]} permission permanently denied. Please enable it in settings.');
      await openAppSettings(); // Opens app settings if permanently denied
    }
  }
}

Future<int> getAndroidVersion() async {
  if (Platform.isAndroid) {
    return int.tryParse(Platform.version.split(' ')[0]) ?? 0;
  }
  return 0; // Return 0 for non-Android platforms
}

Future<void> initializePermissions() async {
  // Determine platform-specific permissions
  List<Permission> permissions = [Permission.storage];

  // Add notification permission for Android 13+ (SDK 33 and above)
  if (Platform.isAndroid && (await getAndroidVersion()) >= 33) {
    permissions.add(Permission.notification);
  }

  // Request permissions
  await requestPermissions(permissions);
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Initialize notifications before the app starts
  final LocalNotificationService notificationService = LocalNotificationService();
  await notificationService.init();
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  
  @override
  void initState() {
    super.initState();
    initializePermissions();					// THIS
  }
***************************************************************************************


=======================================================================================================================

======================= Single Permission (ie enable storage ) =======================

    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

  Future<void> requestStoragePermission() async {
    // Request storage permission
    var status = await Permission.storage.request();

    if (status.isGranted) {
      // Permission granted, you can proceed with writing to storage
      print('Storage permission granted');
    } else {
      // Permission denied
      print('Storage permission denied');
    }
  }


  @override
  void initState() {
    super.initState();
    requestStoragePermission();
  }


======================= Multiple Permissions (ie enable storage, camera and location ) =======================

------ in Manifest ----
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />


----- in main.dart ----------

Future<void> requestPermissions(List<Permission> permissions) async {
  for (var permission in permissions) {
    var status = await permission.request();
    if (status.isGranted) {
      print('${permission.toString().split('.')[1]} permission granted');
    } else {
      print('${permission.toString().split('.')[1]} permission denied');
    }
  }
}


void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Define the list of permissions to request
  List<Permission> permissions = [
    Permission.storage,
    // Add more permissions as needed
    Permission.camera,
    Permission.location,
  ];

  // Request the permissions
  await requestPermissions(permissions);

  runApp(MyApp());
}